uniform_float uStrength {
    default = 1.0;
    min = 0.0;
    max = 1.0;
    step = 0.01;
    static = false;
}

uniform_float uScale {
    default = 8.0;
    min = 0.0;
    max = 10.0;
    step = 0.01;
	display_name = "Blur Scale";
}

shared {

}

fragment downsample1(){
	omw_In vec2 omw_TexCoord;

	void main()
	{
		vec2 uv = omw_TexCoord.xy * 2;
		vec2 halfpixel = 0.5 / (omw.resolution.xy / 2.0);

		vec4 sum = omw_GetLastPass(uv) * 4.0;
		sum += omw_GetLastPass(uv - halfpixel.xy * uScale);
		sum += omw_GetLastPass(uv + halfpixel.xy * uScale);
		sum += omw_GetLastPass(uv + vec2(halfpixel.x, -halfpixel.y) * uScale);
		sum += omw_GetLastPass(uv - vec2(halfpixel.x, -halfpixel.y) * uScale);

		omw_FragColor = sum / 8.0;
	}
}

fragment downsample2(){
	omw_In vec2 omw_TexCoord;

	void main()
	{
		vec2 uv = omw_TexCoord.xy * 2;
		vec2 halfpixel = 0.5 / (omw.resolution.xy / 2.0);

		vec4 sum = omw_GetLastPass(uv) * 4.0;
		sum += omw_GetLastPass(uv - halfpixel.xy * uScale);
		sum += omw_GetLastPass(uv + halfpixel.xy * uScale);
		sum += omw_GetLastPass(uv + vec2(halfpixel.x, -halfpixel.y) * uScale);
		sum += omw_GetLastPass(uv - vec2(halfpixel.x, -halfpixel.y) * uScale);

		omw_FragColor = sum / 8.0;
	}
}

fragment upsample1(){
	omw_In vec2 omw_TexCoord;

	void main()
	{
		vec2 uv = omw_TexCoord.xy / 2;
		vec2 halfpixel = 0.5 / (omw.resolution.xy * 2.0);

		vec4 sum = omw_GetLastPass(uv + vec2(-halfpixel.x * 2.0, 0.0) * uScale);

		sum +=omw_GetLastPass(uv + vec2(-halfpixel.x, halfpixel.y) * uScale) * 2.0;
		sum +=omw_GetLastPass(uv + vec2(0.0, halfpixel.y * 2.0) * uScale);
		sum +=omw_GetLastPass(uv + vec2(halfpixel.x, halfpixel.y) * uScale) * 2.0;
		sum +=omw_GetLastPass(uv + vec2(halfpixel.x * 2.0, 0.0) * uScale);
		sum +=omw_GetLastPass(uv + vec2(halfpixel.x, -halfpixel.y) * uScale) * 2.0;
		sum +=omw_GetLastPass(uv + vec2(0.0, -halfpixel.y * 2.0) * uScale);
		sum +=omw_GetLastPass(uv + vec2(-halfpixel.x, -halfpixel.y) * uScale) * 2.0;

		omw_FragColor = sum / 12.0;
	}
}

fragment upsample2(){
	omw_In vec2 omw_TexCoord;

	void main()
	{
		vec2 uv = omw_TexCoord.xy / 2;
		vec2 halfpixel = 0.5 / (omw.resolution.xy * 2.0);

		vec2 ditherCoord = omw_TexCoord.xy * omw.resolution;

		vec4 sum = omw_GetLastPass(uv + vec2(-halfpixel.x * 2.0, 0.0) * uScale);

		sum += omw_GetLastPass(uv + vec2(-halfpixel.x, halfpixel.y) * uScale) * 2.0;
		sum += omw_GetLastPass(uv + vec2(0.0, halfpixel.y * 2.0) * uScale);
		sum += omw_GetLastPass(uv + vec2(halfpixel.x, halfpixel.y) * uScale) * 2.0;
		sum += omw_GetLastPass(uv + vec2(halfpixel.x * 2.0, 0.0) * uScale);
		sum += omw_GetLastPass(uv + vec2(halfpixel.x, -halfpixel.y) * uScale) * 2.0;
		sum += omw_GetLastPass(uv + vec2(0.0, -halfpixel.y * 2.0) * uScale);
		sum += omw_GetLastPass(uv + vec2(-halfpixel.x, -halfpixel.y) * uScale) * 2.0;

		omw_FragColor = sum / 12.0;
	}
}

fragment main {
	omw_In vec2 omw_TexCoord;


	void main()
	{

		vec3 scene = omw_GetLastShader(omw_TexCoord).rgb;
		vec3 blur = omw_GetLastPass(omw_TexCoord).rgb;

		if (uStrength > 0) {
			vec4 col = vec4(mix(mix(scene, blur + blur * (uStrength * 5), uStrength), vec3(1.0), uStrength), 1.0); // the madness consumes
			omw_FragColor = col;
		}
		else {
			omw_FragColor = vec4(scene, 1.0);
		}
	}
}

technique {
    description = "Fade effect";
    passes = downsample1, downsample2, upsample1, upsample2, main;
    version = "1.0";
    author = "Epoch";
    flags = hidden;
    dynamic = true;
}
