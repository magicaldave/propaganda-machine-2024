uniform_bool uReplaceSky {
	default = true;
	description = "Replace the skybox with the fog colour";
	display_name = "Replace Sky";
}

uniform_bool uUseFogColor {
	default = false;
	description = "False: Match OpenMW fog colour
	True: Use custom fog colour";
}

uniform_vec3 uFogColourInterior {
	default = vec3(0.1, 0.1, 0.1);
	min = vec3(0.0, 0.0, 0.0);
	max = vec3(1.0, 1.0, 1.0);
	step = 0.01;
	display_name = "Fog Colour";
	description = "Colour of the interior underwater fog. By default set to the water colour";
}

uniform_float uFogBrightness {
	default = 1.0;
	step = 0.01;
	description = "Brightness modifier for the fog";
}

uniform_float uFogHeight {
	default = 1300.0;
	step = 10.0;
	display_name = "Fog Start Height";
	description = "Height that the fog starts from";
}

uniform_float uFogDensity {
	default = 0.012;
	min = 0.0;
	max = 1.0;
	step = 0.001;
	display_name = "Fog Density";
	description = "Density of the fog, affects falloff";
}

uniform_bool uReplaceSun {
	default = true;
	display_name = "Replace Sun";
	description = "Draw a custom sun overtop the fog";
	header = "Sun";
}

uniform_float uSunSize {
	default = 0.003;
	min = 0.0;
	max = 0.3;
	step = 0.0001;
	display_name = "Sun Size";
}

uniform_float uSunBrightness {
	default = 1.0;
	min = 0.0;
	max = 10.0;
	step = 0.01;
	display_name = "Sun Brightness";
}

uniform_float uGlareBrightness {
	default = 0.4;
	min = 0.0;
	max = 10.0;
	step = 0.01;
	display_name = "Sun Glare Brightness";
	description = "Brightness of sun fake glare/halo";
}

uniform_bool uDithering {
	default = true;
	display_name = "Dithering";
	description = "Apply dithering to the fog to remove banding";
	header = "Dithering";
}

uniform_float uDitherStrength {
    default = 128;
    min = 1.0;
    max = 255.0;
    step = 1.0;
	display_name = "Dither intensity";
	description = "Lower value decreases more banding but makes the dithering more visible.";
}

uniform_bool uTemporalDither {
	default = false;
	display_name = "Temporal Dithering";
	description = "Change the dither pattern temporally, may result in less banding but more visible dithering.";
}

uniform_bool uEnabled {
	default = true;
	header = "Debug";
}

uniform_int uDebug {
	default = 0;
	min = 0;
	max = 2;
	display_name = "Debug Mode";
	description = "Show fog factor only for debug
0: Disabled
1: Fog Term
2: Fog only";
}


shared {	
	vec3 screen_space_dither(vec2 frag_coord) {
	
		// Iestyn's RGB dither (7 asm instructions) from Portal 2 X360, slightly modified for VR.
		vec3 dither = vec3(dot(vec2(171.0, 231.0), frag_coord));
		dither.rgb = fract(dither.rgb / vec3(103.0, 71.0, 97.0));

		// Subtract 0.5 to avoid slightly brightening the whole viewport.
		return (dither.rgb - 0.5) / uDitherStrength;
	}

	// from Zesterer's cloud shader
	vec3 sun_light(vec3 dir, float frac) {
		//const float frac = 0.003;
		vec3 sun_dir = normalize(omw.sunPos.xyz);
		vec3 sun = clamp(pow((dot(dir, sun_dir) - (1.0 - frac)) / frac, 10) * 1, 0, 1) * omw.sunColor.rgb * 50;

		return sun;
	}

	vec3 sun_glare(vec3 dir) {
		vec3 sun_dir = normalize(omw.sunPos.xyz);
		vec3 sun_glare = pow(max(dot(dir, sun_dir), 0), 10) * omw.sunColor.rgb * 0.5;

		return sun_glare;
	}
}

fragment main {
	omw_In vec2 omw_TexCoord;
	

	void main()
	{
		
		vec3 scene = omw_GetLastShader(omw_TexCoord).rgb;
		vec4 omwFog = omw.fogColor * omw_EstimateFogCoverageFromUV(omw_TexCoord);
		 
		bool is_sky = (omw_GetLinearDepth(omw_TexCoord) > omw.far*0.999);
		float factor = is_sky ? 1.0 : 0.0;
		
		vec3 F = vec3(0.0, 0.0, 1.0); // fog normal, using z axis only so hard code
		vec3 fogPos = vec3(0.0, 0.0, uFogHeight); // fog position, only using z axis
		
		vec3 worldPos = omw_GetWorldPosFromUV(omw_TexCoord) - fogPos;
		vec3 viewPos = omw.eyePos.xyz - fogPos;

		if (uReplaceSky) {
			scene = mix(scene, uUseFogColor ? uFogColourInterior : omw.fogColor.xyz, factor);
		}

		// calculate fog
		float a = (uFogDensity) / 10000.0;
		vec3 V = viewPos - worldPos;
		float F_dot_P = dot(F, worldPos);
		float F_dot_C = dot(F, viewPos);
		float k = clamp(-sign(F_dot_C), 0.0, 1.0);
		
		vec3 aV = (a / 2.0) * V;
		float c1 = k * (F_dot_P + F_dot_C);
		float c2 = (1.0 - 2.0 * k) * F_dot_P;
		float F_dot_V = dot(F, V);
		
		float g = min(c2, 0.0);
		g = -length(aV) * (c1 - g * g / abs(F_dot_V));
		
		float fogFactor = (1.0 - clamp(exp2(-g), 0.0, 1.0));
		
		
		vec2 ditherCoord = omw_TexCoord.xy * omw.resolution;
		if (uTemporalDither) {
			ditherCoord += omw.simulationTime;
		}
		
		vec3 fogColAdjusted = ((uUseFogColor ? uFogColourInterior : omw.fogColor.xyz) * uFogBrightness);
		vec3 fogScene = max(mix(scene, fogColAdjusted, fogFactor), omwFog.rgb);
		
		if (uDebug == 1) {
			fogScene = vec3(fogFactor);
		}
		
		if (uDebug == 2) {
			fogScene = mix(vec3(0.0), fogColAdjusted, fogFactor);
		}
		
		if (uDithering) {
			fogScene += screen_space_dither(ditherCoord);
		}

		if (uReplaceSun) {
			float depth = omw_GetDepth(omw_TexCoord);

			vec3 wpos = omw_GetWorldPosFromUV(omw_TexCoord);
			float max_dist = distance(omw.eyePos.xyz, wpos);
			vec3 dir = (wpos - omw.eyePos.xyz) / max_dist;

			vec3 sun = sun_light(dir, uSunSize) * omw.sunVis * uSunBrightness;
			vec3 sun_glare = sun_glare(dir) * omw.sunVis * uGlareBrightness;

			sun += sun_glare;
			sun *= factor;

			fogScene += (sun * omw.sunColor.rgb);
		}
		
		
		if (uEnabled) {
			vec4 col = vec4(fogScene, 1.0);
			omw_FragColor = col;
		} 
		else {
			omw_FragColor = vec4(scene, 1.0);
		}
	}
}

technique {
    description = "Volumetric fog";
    passes = main;
    version = "1.0";
    author = "Epoch";
	flags = disable_sunglare;
}
